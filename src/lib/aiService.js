// src/lib/aiService.js

const CLAUDE_API_KEY = import.meta.env.VITE_CLAUDE_API_KEY;
const OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY;
const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY;

/**
 * Vygeneruje AI vysvƒõtlen√≠ pro matematick√Ω p≈ô√≠klad
 * @param {Object} problem - Objekt s p≈ô√≠kladem (question_text, options, atd.)
 * @param {Object} userAnswer - Odpovƒõƒè u≈æivatele (is_correct, selected_option_id)
 * @param {Number} attempt - Poƒçet pokus≈Ø (1 = prvn√≠ vysvƒõtlen√≠, 2 = jednodu≈°≈°√≠)
 * @returns {String} - Vysvƒõtlen√≠ v HTML form√°tu
 */
export async function generateExplanation(problem, userAnswer, attempt = 1) {
  // Najdi spr√°vnou odpovƒõƒè
  const correctOption = problem.options.find((o) => o.is_correct);
  const selectedOption = problem.options.find(
    (o) => o.id === userAnswer.selected_option_id
  );

  // Vytvo≈ô prompt pro AI
  const prompt = createPrompt(problem, correctOption, selectedOption, attempt);

  // Zvol AI poskytovatele (priorita: Claude > OpenAI > Gemini)
  if (CLAUDE_API_KEY) {
    return await callClaude(prompt);
  } else if (OPENAI_API_KEY) {
    return await callOpenAI(prompt);
  } else if (GEMINI_API_KEY) {
    return await callGemini(prompt);
  } else {
    throw new Error("≈Ω√°dn√Ω AI API kl√≠ƒç nen√≠ nastaven! P≈ôidej do .env souboru.");
  }
}

/**
 * Vytvo≈ô√≠ prompt pro AI
 */
function createPrompt(problem, correctOption, selectedOption, attempt) {
  const isFirstAttempt = attempt === 1;

  const basePrompt = `Jsi pomocn√Ω uƒçitel matematiky pro ≈æ√°ky p≈ôipravuj√≠c√≠ se na p≈ôij√≠mac√≠ zkou≈°ky.

**ZAD√ÅN√ç:**
${problem.question_text}

**SPR√ÅVN√Å ODPOVƒöƒé:** ${correctOption.option_letter}) ${
    correctOption.answer_text
  }
**≈Ω√ÅK ODPOVƒöDƒöL:** ${selectedOption.option_letter}) ${
    selectedOption.answer_text
  }

**√öKOL:**
${
  isFirstAttempt
    ? `Vysvƒõtli ≈æ√°kovi, proƒç je spr√°vn√° odpovƒõƒè ${correctOption.option_letter}, a kde udƒõlal chybu.`
    : `≈Ω√°k st√°le nech√°pe. Vysvƒõtli to JE≈†Tƒö JEDNODU≈†EJI, krok za krokem, jako by mƒõl 12 let.`
}

**STYL VYSVƒöTLEN√ç:**
- Pi≈° v ƒçe≈°tinƒõ, p≈ô√°telsky, jako kamar√°d
- Pou≈æ√≠vej jednoduch√© p≈ô√≠klady
- Rozdƒõl vysvƒõtlen√≠ na kroky
- Pou≈æ√≠vaj emojis pro zp≈ô√≠jemnƒõn√≠ (‚úÖ, üí°, ‚ö†Ô∏è)
${
  !isFirstAttempt
    ? "- Pou≈æij MAXIM√ÅLNƒö JEDNODUCH√â VYSVƒöTLEN√ç, jako pro mal√© d√≠tƒõ"
    : ""
}

**FORM√ÅT ODPOVƒöDI:**
1. Kr√°tk√© shrnut√≠ (1 vƒõta)
2. Krok za krokem ≈ôe≈°en√≠
3. Vysvƒõtlen√≠ chyby ≈æ√°ka
4. Tip, jak se chybƒõ p≈ô√≠≈°tƒõ vyhnout

Odpovƒõƒè:`;

  return basePrompt;
}

/**
 * Vol√°n√≠ Claude API
 */
async function callClaude(prompt) {
  try {
    const response = await fetch("https://api.anthropic.com/v1/messages", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": CLAUDE_API_KEY,
        "anthropic-version": "2023-06-01",
      },
      body: JSON.stringify({
        model: "claude-sonnet-4-20250514", // Nejnovƒõj≈°√≠ model
        max_tokens: 1500,
        messages: [
          {
            role: "user",
            content: prompt,
          },
        ],
      }),
    });

    if (!response.ok) {
      const error = await response.json();
      console.error("Claude API error:", error);
      throw new Error(`Claude API: ${error.error?.message || "Nezn√°m√° chyba"}`);
    }

    const data = await response.json();
    return data.content[0].text;
  } catch (error) {
    console.error("Chyba p≈ôi vol√°n√≠ Claude:", error);
    throw error;
  }
}

/**
 * Vol√°n√≠ OpenAI API
 */
async function callOpenAI(prompt) {
  try {
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-4o-mini", // Levnƒõj≈°√≠ model
        messages: [
          {
            role: "system",
            content:
              "Jsi pomocn√Ω uƒçitel matematiky pro ≈æ√°ky na z√°kladn√≠ ≈°kole.",
          },
          {
            role: "user",
            content: prompt,
          },
        ],
        max_tokens: 1500,
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      const error = await response.json();
      console.error("OpenAI API error:", error);
      throw new Error(`OpenAI API: ${error.error?.message || "Nezn√°m√° chyba"}`);
    }

    const data = await response.json();
    return data.choices[0].message.content;
  } catch (error) {
    console.error("Chyba p≈ôi vol√°n√≠ OpenAI:", error);
    throw error;
  }
}

/**
 * Vol√°n√≠ Google Gemini API (FREE)
 */
async function callGemini(prompt) {
  try {
    // ‚úÖ SPR√ÅVN√ù MODEL - gemini-2.0-flash (z tv√©ho cURL)
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  text: prompt,
                },
              ],
            },
          ],
          generationConfig: {
            temperature: 0.7,
            maxOutputTokens: 1500,
          },
        }),
      }
    );

    if (!response.ok) {
      const error = await response.json();
      console.error("Gemini API error:", error);
      throw new Error(`Gemini API: ${error.error?.message || "Nezn√°m√° chyba"}`);
    }

    const data = await response.json();
    return data.candidates[0].content.parts[0].text;
  } catch (error) {
    console.error("Chyba p≈ôi vol√°n√≠ Gemini:", error);
    throw error;
  }
}
/**
 * Ulo≈æ√≠ AI vysvƒõtlen√≠ do datab√°ze (voliteln√© - pro cache)
 */
export async function saveExplanation(problemId, explanation, provider) {
  try {
    const { supabase } = await import("./supabase");

    const { error } = await supabase.from("ai_explanations").insert({
      problem_id: problemId,
      explanation: explanation,
      ai_provider: provider,
      generated_at: new Date().toISOString(),
    });

    if (error) {
      console.error("Chyba p≈ôi ukl√°d√°n√≠ vysvƒõtlen√≠:", error);
    }
  } catch (error) {
    console.error("Kritick√° chyba p≈ôi ukl√°d√°n√≠ vysvƒõtlen√≠:", error);
  }
}

/**
 * Naƒçte ulo≈æen√© vysvƒõtlen√≠ z datab√°ze (pokud existuje)
 */
export async function getExplanation(problemId) {
  try {
    const { supabase } = await import("./supabase");

    const { data, error } = await supabase
      .from("ai_explanations")
      .select("*")
      .eq("problem_id", problemId)
      .order("generated_at", { ascending: false })
      .limit(1)
      .single();

    if (error && error.code !== "PGRST116") {
      // PGRST116 = not found
      console.error("Chyba p≈ôi naƒç√≠t√°n√≠ vysvƒõtlen√≠:", error);
      return null;
    }

    return data;
  } catch (error) {
    console.error("Kritick√° chyba p≈ôi naƒç√≠t√°n√≠ vysvƒõtlen√≠:", error);
    return null;
  }
}

// import { supabase } from "./supabase";

// // Generov√°n√≠ AI vysvƒõtlen√≠ pomoc√≠ Claude API (p≈ôes Supabase Edge Function)
// export async function generateExplanation(problem, userAnswer, attempt = 1) {
//   const correctOption = problem.options.find((o) => o.is_correct);
//   const selectedOption = problem.options.find(
//     (o) => o.id === userAnswer.selected_option_id
//   );

//   const systemPrompt =
//     attempt === 1
//       ? `Jsi laskav√Ω uƒçitel matematiky pro studenty z√°kladn√≠ch ≈°kol p≈ôipravuj√≠c√≠ se na p≈ôij√≠mac√≠ zkou≈°ky.
// Vysvƒõtli studentovi, proƒç jeho odpovƒõƒè byla ≈°patn√° a jak spr√°vnƒõ vy≈ôe≈°it √∫lohu.
// Pou≈æ√≠vej jasn√Ω, srozumiteln√Ω jazyk a p≈ôidej odkazy na u≈æiteƒçn√© zdroje.`
//       : `Student st√°le nerozum√≠. Zkus to vysvƒõtlit JINAK - pou≈æij praktick√Ω p≈ô√≠klad, nakresli si to,
// nebo rozdƒõl probl√©m na men≈°√≠ kroky. Buƒè kreativn√≠ a pomoz studentovi to pochopit.`;

//   const userPrompt =
//     attempt === 1
//       ? `**Vysvƒõtlen√≠ √∫lohy: ${problem.title}**

// **Zad√°n√≠:** ${problem.question_text}

// **Student odpovƒõdƒõl:** ${selectedOption.option_letter}) ${selectedOption.answer_text}
// **Spr√°vn√° odpovƒõƒè:** ${correctOption.option_letter}) ${correctOption.answer_text}

// Pros√≠m vysvƒõtli:
// 1. Co po n√°s √∫loha chce
// 2. Kl√≠ƒçov√© informace v zad√°n√≠
// 3. Spr√°vn√Ω postup ≈ôe≈°en√≠ krok za krokem
// 4. Proƒç je spr√°vn√° odpovƒõƒè ${correctOption.option_letter})

// Na konci p≈ôidej 2-3 doporuƒçen√© zdroje (odkazy na YouTube, Khan Academy, Matematika.cz).

// Form√°tuj odpovƒõƒè v markdown s **tuƒçn√Ωm textem** pro d≈Øle≈æit√© ƒç√°sti.`
//       : `Student st√°le nech√°pe tuto √∫lohu:

// **${problem.title}**
// ${problem.question_text}

// Spr√°vn√° odpovƒõƒè: ${correctOption.option_letter}) ${correctOption.answer_text}

// Zkus to vysvƒõtlit ALTERNATIVN√çM ZP≈ÆSOBEM - praktick√Ω p≈ô√≠klad, vizualizace, nebo jinou metodou.`;

//   try {
//     // POZN√ÅMKA: Toto je mock implementace
//     // V produkci byste volali skuteƒçn√© API p≈ôes Supabase Edge Function

//     // Simulace API vol√°n√≠
//     await new Promise((resolve) => setTimeout(resolve, 1500));

//     if (attempt === 1) {
//       return `**Vysvƒõtlen√≠ √∫lohy: ${problem.title}**

// **Zad√°n√≠:** ${problem.question_text}

// **Spr√°vn√° odpovƒõƒè:** ${correctOption.option_letter}) ${
//         correctOption.answer_text
//       }

// **Postup ≈ôe≈°en√≠:**
// 1. Nejprve si rozebereme, co po n√°s √∫loha chce
// 2. Identifikujeme kl√≠ƒçov√© informace v zad√°n√≠
// 3. Pou≈æijeme odpov√≠daj√≠c√≠ matematick√Ω postup
// 4. Dojdeme ke spr√°vn√©mu v√Ωsledku

// **Doporuƒçen√© zdroje:**
// - [Video n√°vod na podobn√© p≈ô√≠klady](https://www.youtube.com/results?search_query=${encodeURIComponent(
//         problem.title
//       )})
// - [Khan Academy - Matematika](https://cs.khanacademy.org/math)
// - [Matematika.cz](https://www.matematika.cz/)

// Pokud ti to st√°le nen√≠ jasn√©, klikni na "Po≈ô√°d nech√°pu" a zkus√≠m to vysvƒõtlit jinak.`;
//     } else {
//       return `**Alternativn√≠ vysvƒõtlen√≠**

// Zkusme to jinak! P≈ôedstav si tuto √∫lohu prakticky:

// **${problem.title}**

// Nƒõkdy pom√°h√° si √∫lohu nakreslit nebo si ji p≈ôedstavit na re√°ln√©m p≈ô√≠kladu.

// **Krok za krokem:**
// - Zaƒçni t√≠m, co u≈æ v√≠≈°
// - Napi≈° si v≈°echny dan√© informace
// - Zkus si probl√©m rozdƒõlit na men≈°√≠ ƒç√°sti
// - Postupuj systematicky

// **Spr√°vn√° odpovƒõƒè je:** ${correctOption.option_letter}) ${correctOption.answer_text}

// **Tip:** Zkus si podobn√© p≈ô√≠klady procviƒçit na tƒõchto str√°nk√°ch:
// - [Um√≠me matematiku](https://www.umimematiku.cz/)
// - [Matematika pro ka≈æd√©ho](https://www.matweb.cz/)

// Pokud st√°le m√°≈° probl√©my s touto oblast√≠, doporuƒçuji zopakovat si teorii nebo poprosit o pomoc uƒçitele.`;
//     }
//   } catch (error) {
//     console.error("‚ùå Chyba p≈ôi generov√°n√≠ vysvƒõtlen√≠:", error);
//     return "Omlouv√°me se, vysvƒõtlen√≠ se nepoda≈ôilo vygenerovat. Zkuste to pros√≠m znovu.";
//   }
// }

// Pro budouc√≠ produkƒçn√≠ implementaci s re√°ln√Ωm API:
/*
export async function generateExplanation(problem, userAnswer, attempt = 1) {
  try {
    const { data, error } = await supabase.functions.invoke('generate-explanation', {
      body: {
        problem,
        userAnswer,
        attempt
      }
    });
    
    if (error) throw error;
    return data.explanation;
  } catch (error) {
    console.error('‚ùå Chyba p≈ôi generov√°n√≠ vysvƒõtlen√≠:', error);
    throw error;
  }
}
*/
